// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231227215206_Order")]
    partial class Order
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "288ec58b-eaa2-4417-b46e-3042df443bb2",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(1380),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+46XhfLKOuPOdm+z98wO24gGqcdDhydZlRkIoGtTwyJDlY54Pt2Ws3AYWzr4uJqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc547dd-4b14-4777-87af-b0b6ca4ad86a",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f148ba7b-5cac-4420-9b73-684f55cc44c8",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 736, DateTimeKind.Utc).AddTicks(3873),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGbZR9jclUf+vrn2aqy4AO0h4eYO/0llbwDlPk4wnFcnireRWp9eW7naY8SgOyCFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1f33031-af4b-4e22-ab2e-c481d7f20235",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f0bcd1e-a79b-4032-993b-b4229264d911",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 802, DateTimeKind.Utc).AddTicks(4103),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAELht83jsZ9iuc2C5GAVA3eUnirl4+PfCn6eZ2FNHCnYSZY/DWBm0eFr7epKYezQKVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ee0326-db59-4a89-a6fe-82dbdd5c5455",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 671, DateTimeKind.Utc).AddTicks(9283),
                            Description = "Gül ipsam layıkıyla amet göze et velit cezbelendi sokaklarda labore.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(4),
                            Description = "Öyle velit incidunt velit qui quis otobüs iusto doğru çıktılar.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(73),
                            Description = "Eve eaque lakin ki laboriosam filmini quasi reprehenderit şafak voluptatem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(328),
                            Description = "Sevindi iure velit quia quae umut laudantium exercitationem voluptatem orta.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(534),
                            Description = "Karşıdakine aut ullam lakin consequatur çarpan filmini de aspernatur lakin.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(588),
                            Description = "Beğendim de nesciunt yazın laboriosam makinesi telefonu camisi alias balıkhaneye.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Baby",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(855),
                            Description = "Bahar sevindi duyulmamış voluptatem otobüs consectetur fugit ad olduğu ki.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(906),
                            Description = "Koştum için lambadaki quia autem karşıdakine dignissimos architecto accusantium aut.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(978),
                            Description = "Dicta dolore laudantium laboriosam nemo cesurca telefonu uzattı exercitationem et.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 672, DateTimeKind.Utc).AddTicks(1027),
                            Description = "Düşünüyor gülüyorum ötekinden dağılımı dolores filmini anlamsız vitae qui oldular.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("PriceOfOrder")
                        .HasColumnType("money");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("KDV")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("OTV")
                        .HasColumnType("decimal");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(3026),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Awesome Concrete Tuna",
                            Status = 1,
                            UnitPrice = 444.59m,
                            UnitsInStock = 0
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(3584),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Cotton Chicken",
                            Status = 1,
                            UnitPrice = 632.31m,
                            UnitsInStock = 37
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(3722),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Rubber Table",
                            Status = 1,
                            UnitPrice = 868.87m,
                            UnitsInStock = 5
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(3815),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Practical Wooden Chips",
                            Status = 1,
                            UnitPrice = 736.20m,
                            UnitsInStock = 28
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(3940),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Soft Ball",
                            Status = 1,
                            UnitPrice = 63.85m,
                            UnitsInStock = 21
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(4041),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Small Fresh Salad",
                            Status = 1,
                            UnitPrice = 506.41m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(4110),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Concrete Soap",
                            Status = 1,
                            UnitPrice = 165.32m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(4169),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Practical Cotton Car",
                            Status = 1,
                            UnitPrice = 740.04m,
                            UnitsInStock = 2
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(7894),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Generic Metal Mouse",
                            Status = 1,
                            UnitPrice = 341.55m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(7967),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Concrete Table",
                            Status = 1,
                            UnitPrice = 209.84m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8162),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Gorgeous Fresh Chicken",
                            Status = 1,
                            UnitPrice = 588.63m,
                            UnitsInStock = 21
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8223),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Steel Tuna",
                            Status = 1,
                            UnitPrice = 104.24m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8273),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Cotton Ball",
                            Status = 1,
                            UnitPrice = 830.37m,
                            UnitsInStock = 1
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8340),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handcrafted Metal Computer",
                            Status = 1,
                            UnitPrice = 833.63m,
                            UnitsInStock = 42
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8391),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Fantastic Granite Tuna",
                            Status = 1,
                            UnitPrice = 169.04m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8621),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Intelligent Soft Chicken",
                            Status = 1,
                            UnitPrice = 286.51m,
                            UnitsInStock = 1
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8678),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handcrafted Cotton Cheese",
                            Status = 1,
                            UnitPrice = 118.74m,
                            UnitsInStock = 26
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8759),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Refined Metal Shoes",
                            Status = 1,
                            UnitPrice = 485.55m,
                            UnitsInStock = 17
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8810),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Practical Fresh Salad",
                            Status = 1,
                            UnitPrice = 444.71m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8859),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Fantastic Fresh Cheese",
                            Status = 1,
                            UnitPrice = 500.75m,
                            UnitsInStock = 22
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8907),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Frozen Soap",
                            Status = 1,
                            UnitPrice = 39.62m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(8957),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Granite Bacon",
                            Status = 1,
                            UnitPrice = 341.47m,
                            UnitsInStock = 24
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9005),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Generic Granite Keyboard",
                            Status = 1,
                            UnitPrice = 708.01m,
                            UnitsInStock = 20
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9076),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Gorgeous Steel Gloves",
                            Status = 1,
                            UnitPrice = 162.87m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9129),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Sleek Rubber Shirt",
                            Status = 1,
                            UnitPrice = 456.13m,
                            UnitsInStock = 17
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9179),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Licensed Wooden Keyboard",
                            Status = 1,
                            UnitPrice = 103.04m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9233),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Gorgeous Granite Tuna",
                            Status = 1,
                            UnitPrice = 850.52m,
                            UnitsInStock = 34
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9280),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Small Concrete Bacon",
                            Status = 1,
                            UnitPrice = 78.51m,
                            UnitsInStock = 12
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9330),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Practical Rubber Pizza",
                            Status = 1,
                            UnitPrice = 110.14m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 27, 21, 52, 5, 871, DateTimeKind.Utc).AddTicks(9383),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Concrete Mouse",
                            Status = 1,
                            UnitPrice = 780.97m,
                            UnitsInStock = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2dcee76e-ceaf-4bd1-91b1-b9f41fda3d30",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6077887d-9336-4348-8474-c150fdd8b797",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "bd23d7c1-5e06-426c-81a8-648295cb9e8c",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
