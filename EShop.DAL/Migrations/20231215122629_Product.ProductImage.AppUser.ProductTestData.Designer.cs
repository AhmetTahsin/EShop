// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231215122629_Product.ProductImage.AppUser.ProductTestData")]
    partial class ProductProductImageAppUserProductTestData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "568a6063-114a-4454-ac02-edb3d1e6a1f0",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7836),
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELWwukbkjf5h9CSRyj9cPXoChJsLgmMA6GZ93NhZJs398jNl/lxOoYQXp2ttAetW0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5099cba3-2776-4dc4-94b4-6598f6ec8302",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c60824cd-697b-4812-ac8f-2ae93781429a",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 712, DateTimeKind.Utc).AddTicks(3560),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAELs9ay2ar9Gw0/AmcS7kIEwUofABh+rfpusZMM8+T2Z5kXYQYcK9tkKpRZ86+vquBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9314bf99-c135-429b-be7f-04d79d533ca0",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(6875),
                            Description = "Eve yazın mıknatıslı dergi vel dolor mutlu masaya molestiae mıknatıslı.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7145),
                            Description = "İn iure çorba adanaya explicabo rem et beğendim ad ipsum.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7209),
                            Description = "Alias consequatur masaya quam labore mutlu aliquam suscipit yapacakmış alias.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7260),
                            Description = "Sayfası tv in değerli olduğu minima dolor eum aspernatur sıradanlıktan.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7318),
                            Description = "Patlıcan hesap ullam aliquam telefonu umut quis duyulmamış quia magnam.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Garden",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7394),
                            Description = "Ea yaptı voluptatem sokaklarda ducimus qui doloremque sit adresini fugit.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Home",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7452),
                            Description = "Eve türemiş et şafak blanditiis labore filmini non oldular exercitationem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7503),
                            Description = "Çorba beatae batarya aperiam sed kutusu quia yapacakmış corporis ut.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7558),
                            Description = "Nemo gidecekmiş totam perferendis salladı lambadaki sit ipsa ratione öyle.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 649, DateTimeKind.Utc).AddTicks(7653),
                            Description = "Teldeki gül laboriosam et quia orta quia mi voluptatem oldular.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductImageID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductImageID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8160),
                            ProductImageID = 1,
                            ProductName = "Generic Fresh Chips",
                            Status = 1,
                            UnitPrice = 556.49m,
                            UnitsInStock = 0
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8599),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Plastic Keyboard",
                            Status = 1,
                            UnitPrice = 861.53m,
                            UnitsInStock = 47
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8656),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Steel Ball",
                            Status = 1,
                            UnitPrice = 909.42m,
                            UnitsInStock = 4
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8696),
                            ProductImageID = 1,
                            ProductName = "Tasty Plastic Bike",
                            Status = 1,
                            UnitPrice = 672.53m,
                            UnitsInStock = 46
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8738),
                            ProductImageID = 1,
                            ProductName = "Small Frozen Shirt",
                            Status = 1,
                            UnitPrice = 158.84m,
                            UnitsInStock = 30
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8785),
                            ProductImageID = 1,
                            ProductName = "Generic Frozen Car",
                            Status = 1,
                            UnitPrice = 959.94m,
                            UnitsInStock = 17
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8825),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Concrete Salad",
                            Status = 1,
                            UnitPrice = 333.40m,
                            UnitsInStock = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8868),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Granite Pizza",
                            Status = 1,
                            UnitPrice = 857.91m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8941),
                            ProductImageID = 1,
                            ProductName = "Handmade Fresh Chair",
                            Status = 1,
                            UnitPrice = 753.17m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8985),
                            ProductImageID = 1,
                            ProductName = "Rustic Plastic Chair",
                            Status = 1,
                            UnitPrice = 11.91m,
                            UnitsInStock = 0
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9026),
                            ProductImageID = 1,
                            ProductName = "Licensed Rubber Tuna",
                            Status = 1,
                            UnitPrice = 635.90m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9066),
                            ProductImageID = 1,
                            ProductName = "Practical Soft Towels",
                            Status = 1,
                            UnitPrice = 390.86m,
                            UnitsInStock = 0
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9107),
                            ProductImageID = 1,
                            ProductName = "Rustic Metal Chips",
                            Status = 1,
                            UnitPrice = 320.12m,
                            UnitsInStock = 47
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9146),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Granite Fish",
                            Status = 1,
                            UnitPrice = 775.13m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9186),
                            ProductImageID = 1,
                            ProductName = "Generic Rubber Bike",
                            Status = 1,
                            UnitPrice = 347.16m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9255),
                            ProductImageID = 1,
                            ProductName = "Unbranded Fresh Computer",
                            Status = 1,
                            UnitPrice = 487.23m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9296),
                            ProductImageID = 1,
                            ProductName = "Awesome Plastic Car",
                            Status = 1,
                            UnitPrice = 118.28m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9336),
                            ProductImageID = 1,
                            ProductName = "Sleek Granite Sausages",
                            Status = 1,
                            UnitPrice = 403.35m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9376),
                            ProductImageID = 1,
                            ProductName = "Intelligent Wooden Cheese",
                            Status = 1,
                            UnitPrice = 163.50m,
                            UnitsInStock = 39
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9420),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Steel Pants",
                            Status = 1,
                            UnitPrice = 202.08m,
                            UnitsInStock = 42
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9459),
                            ProductImageID = 1,
                            ProductName = "Generic Cotton Keyboard",
                            Status = 1,
                            UnitPrice = 662.54m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9497),
                            ProductImageID = 1,
                            ProductName = "Intelligent Cotton Towels",
                            Status = 1,
                            UnitPrice = 231.45m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9565),
                            ProductImageID = 1,
                            ProductName = "Refined Rubber Computer",
                            Status = 1,
                            UnitPrice = 675.18m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9603),
                            ProductImageID = 1,
                            ProductName = "Fantastic Frozen Bike",
                            Status = 1,
                            UnitPrice = 975.21m,
                            UnitsInStock = 49
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9642),
                            ProductImageID = 1,
                            ProductName = "Generic Granite Tuna",
                            Status = 1,
                            UnitPrice = 526.34m,
                            UnitsInStock = 4
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9680),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Steel Cheese",
                            Status = 1,
                            UnitPrice = 945.70m,
                            UnitsInStock = 27
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9719),
                            ProductImageID = 1,
                            ProductName = "Incredible Metal Table",
                            Status = 1,
                            UnitPrice = 660.21m,
                            UnitsInStock = 32
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9757),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Plastic Chair",
                            Status = 1,
                            UnitPrice = 619.28m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9795),
                            ProductImageID = 1,
                            ProductName = "Intelligent Steel Salad",
                            Status = 1,
                            UnitPrice = 220.40m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(9862),
                            ProductImageID = 1,
                            ProductName = "Tasty Plastic Sausages",
                            Status = 1,
                            UnitPrice = 224.42m,
                            UnitsInStock = 37
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 12, 26, 28, 776, DateTimeKind.Utc).AddTicks(8103),
                            ImagePath = "/Images/ProductImages/Test.png",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "47a39032-f462-4aa2-8157-7613c6a90374",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "44958d28-c726-4410-a36c-14a8cb65e5a0",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("EShop.ENTITIES.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageID");

                    b.Navigation("Category");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
