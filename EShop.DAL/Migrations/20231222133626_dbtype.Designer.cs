// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231222133626_dbtype")]
    partial class dbtype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "426e132c-d232-40ba-8c7e-1db0821bcc40",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 211, DateTimeKind.Utc).AddTicks(406),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCHbWhC3fpWjknhu61dLZU+aRDpxY3WZr8qoGiovrwtY3jP3KPFCQeAy9HYBVxPEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9a18e8c-fb57-44d0-b0bf-4f420a9a58e0",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fdbea1e-6fbe-4885-8dd4-65c976544e33",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 277, DateTimeKind.Utc).AddTicks(7453),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAECMhjyhcBrizmEiv3sH/orqVDxRxzT+edwlNQdnNEHYu6GdHLGEseJUMBZ2pBy3A0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb88f68e-e5ac-4f8e-9e80-0e247c5c28ea",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "306b69f5-c789-4f78-ae17-903a8fbcbb91",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 340, DateTimeKind.Utc).AddTicks(8027),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/72FNaC6onZHbj68n9kC2uWojdd0kGZTqP/CfeHEPZ3/IjBw2quB6r0hGDztIAmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d885e1d-702f-43e0-8fa9-02eb73a159c4",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9309),
                            Description = "Quia incidunt nihil architecto incidunt neque odit beğendim lakin gazete.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9576),
                            Description = "Quia sevindi eaque gazete camisi değirmeni quis uzattı adresini çıktılar.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Home",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9642),
                            Description = "Quam ut magnam consequatur de quam ea ve ekşili dışarı.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9756),
                            Description = "Patlıcan filmini ona eius için sarmal düşünüyor çünkü lakin tempora.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9817),
                            Description = "Sandalye dolayı ea corporis veniam bilgisayarı voluptatem quia magni ona.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9905),
                            Description = "Yapacakmış et quia türemiş un neque aperiam düşünüyor masaya oldular.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 210, DateTimeKind.Utc).AddTicks(9965),
                            Description = "Ama biber nisi aut nesciunt modi gül bilgiyasayarı voluptatem ipsum.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 211, DateTimeKind.Utc).AddTicks(22),
                            Description = "Ut patlıcan sokaklarda voluptatem consequatur çünkü hesap mutlu olduğu anlamsız.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 211, DateTimeKind.Utc).AddTicks(99),
                            Description = "Çarpan sit gördüm commodi koşuyorlar koştum voluptatum koştum architecto dignissimos.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 211, DateTimeKind.Utc).AddTicks(182),
                            Description = "Aliquid ducimus anlamsız reprehenderit çıktılar ullam nostrum et adresini quis.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductImageID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductImageID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(420),
                            ProductImageID = 1,
                            ProductName = "Rustic Frozen Computer",
                            Status = 1,
                            UnitPrice = 953.20m,
                            UnitsInStock = 36
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(812),
                            ProductImageID = 1,
                            ProductName = "Ergonomic Fresh Soap",
                            Status = 1,
                            UnitPrice = 997.76m,
                            UnitsInStock = 48
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(855),
                            ProductImageID = 1,
                            ProductName = "Incredible Soft Shoes",
                            Status = 1,
                            UnitPrice = 605.08m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(892),
                            ProductImageID = 1,
                            ProductName = "Generic Rubber Computer",
                            Status = 1,
                            UnitPrice = 857.00m,
                            UnitsInStock = 12
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1001),
                            ProductImageID = 1,
                            ProductName = "Unbranded Frozen Car",
                            Status = 1,
                            UnitPrice = 982.66m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1046),
                            ProductImageID = 1,
                            ProductName = "Unbranded Soft Gloves",
                            Status = 1,
                            UnitPrice = 799.60m,
                            UnitsInStock = 28
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1083),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Wooden Soap",
                            Status = 1,
                            UnitPrice = 996.44m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1118),
                            ProductImageID = 1,
                            ProductName = "Rustic Cotton Pizza",
                            Status = 1,
                            UnitPrice = 363.40m,
                            UnitsInStock = 42
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1153),
                            ProductImageID = 1,
                            ProductName = "Generic Wooden Tuna",
                            Status = 1,
                            UnitPrice = 882.02m,
                            UnitsInStock = 12
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1188),
                            ProductImageID = 1,
                            ProductName = "Rustic Concrete Fish",
                            Status = 1,
                            UnitPrice = 69.09m,
                            UnitsInStock = 16
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1223),
                            ProductImageID = 1,
                            ProductName = "Small Metal Chair",
                            Status = 1,
                            UnitPrice = 616.64m,
                            UnitsInStock = 2
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1323),
                            ProductImageID = 1,
                            ProductName = "Sleek Wooden Cheese",
                            Status = 1,
                            UnitPrice = 990.69m,
                            UnitsInStock = 26
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1359),
                            ProductImageID = 1,
                            ProductName = "Intelligent Soft Fish",
                            Status = 1,
                            UnitPrice = 260.89m,
                            UnitsInStock = 4
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1392),
                            ProductImageID = 1,
                            ProductName = "Ergonomic Cotton Hat",
                            Status = 1,
                            UnitPrice = 917.95m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1427),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Cotton Chair",
                            Status = 1,
                            UnitPrice = 830.81m,
                            UnitsInStock = 49
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1460),
                            ProductImageID = 1,
                            ProductName = "Intelligent Rubber Tuna",
                            Status = 1,
                            UnitPrice = 497.76m,
                            UnitsInStock = 37
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1493),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Steel Chair",
                            Status = 1,
                            UnitPrice = 895.16m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1563),
                            ProductImageID = 1,
                            ProductName = "Refined Cotton Mouse",
                            Status = 1,
                            UnitPrice = 957.01m,
                            UnitsInStock = 48
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1601),
                            ProductImageID = 1,
                            ProductName = "Sleek Metal Towels",
                            Status = 1,
                            UnitPrice = 245.11m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1636),
                            ProductImageID = 1,
                            ProductName = "Intelligent Steel Mouse",
                            Status = 1,
                            UnitPrice = 343.85m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1669),
                            ProductImageID = 1,
                            ProductName = "Generic Cotton Salad",
                            Status = 1,
                            UnitPrice = 639.62m,
                            UnitsInStock = 7
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1703),
                            ProductImageID = 1,
                            ProductName = "Rustic Concrete Ball",
                            Status = 1,
                            UnitPrice = 888.21m,
                            UnitsInStock = 9
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1737),
                            ProductImageID = 1,
                            ProductName = "Tasty Frozen Keyboard",
                            Status = 1,
                            UnitPrice = 790.62m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1771),
                            ProductImageID = 1,
                            ProductName = "Tasty Steel Pizza",
                            Status = 1,
                            UnitPrice = 751.04m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1824),
                            ProductImageID = 1,
                            ProductName = "Ergonomic Soft Chips",
                            Status = 1,
                            UnitPrice = 373.57m,
                            UnitsInStock = 11
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1859),
                            ProductImageID = 1,
                            ProductName = "Rustic Frozen Keyboard",
                            Status = 1,
                            UnitPrice = 516.95m,
                            UnitsInStock = 15
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1891),
                            ProductImageID = 1,
                            ProductName = "Handmade Frozen Chips",
                            Status = 1,
                            UnitPrice = 440.94m,
                            UnitsInStock = 16
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1924),
                            ProductImageID = 1,
                            ProductName = "Rustic Frozen Chicken",
                            Status = 1,
                            UnitPrice = 164.48m,
                            UnitsInStock = 22
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1958),
                            ProductImageID = 1,
                            ProductName = "Awesome Frozen Sausages",
                            Status = 1,
                            UnitPrice = 511.92m,
                            UnitsInStock = 34
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(1991),
                            ProductImageID = 1,
                            ProductName = "Fantastic Plastic Fish",
                            Status = 1,
                            UnitPrice = 549.77m,
                            UnitsInStock = 11
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2023, 12, 22, 13, 36, 25, 403, DateTimeKind.Utc).AddTicks(354),
                            ImagePath = "/Images/ProductImages/Test.png",
                            ProductID = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "20e85b6e-9828-46ca-9ae6-dec1d9df47a1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "15ef0ef2-ade7-4cef-a574-efdb58224cb7",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "b0bffa9f-a0cc-4e8d-ba9c-018f515c2161",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("EShop.ENTITIES.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageID");

                    b.Navigation("Category");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
