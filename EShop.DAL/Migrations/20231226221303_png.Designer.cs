// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231226221303_png")]
    partial class png
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee8997bf-21e7-4570-b664-f4bb6f765d30",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1672),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENqpFUEUXqec9GT3fDSFyZrYf4NCcjTgQkPNAVy1eozyT8WO2Ghemip1N9OPHmK4Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc33a20a-7f4b-4c63-9ddc-f97904871030",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50aaca71-4163-4218-9c49-749e0c9e71ff",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 408, DateTimeKind.Utc).AddTicks(1855),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEE3W5HSN4ctnf5kfwbOeyGC7WQs3XUtBv33PRmZ7GxUsHhISUtJRbBAF7aqVDqekmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdabc819-ba4e-4da7-8dac-223b787758c7",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64190741-150a-4da4-bcd0-a00bfeb09492",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 475, DateTimeKind.Utc).AddTicks(6585),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/Ng0i+WMcltmOxFp+0pvrJDwc3PWxgwpEPTFj6V3DLFu+8DqEVAZlUzFebtZwNWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87c62621-87ce-4401-b93c-66e87fe0a201",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(704),
                            Description = "Labore quasi ut alias yapacakmış et ea patlıcan yazın rem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(997),
                            Description = "Non quaerat orta göze ışık aliquam reprehenderit neque gül consequatur.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Baby",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1058),
                            Description = "Modi beatae ratione orta bundan tv karşıdakine totam layıkıyla vel.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1143),
                            Description = "Mutlu ama alias değirmeni yazın qui domates enim çobanın rem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Tools",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1195),
                            Description = "Öyle çıktılar yaptı kalemi ut masaya voluptatem dicta camisi reprehenderit.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1249),
                            Description = "Vitae cesurca qui ducimus aut sit gülüyorum sarmal çünkü mutlu.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1304),
                            Description = "Nostrum çünkü cesurca dışarı quaerat odio quaerat ışık et rem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Health",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1376),
                            Description = "Doğru veritatis teldeki neque gülüyorum aliquam salladı qui quia aspernatur.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1429),
                            Description = "Voluptate aspernatur voluptatem ut beğendim un sıla bilgisayarı bahar vel.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 344, DateTimeKind.Utc).AddTicks(1481),
                            Description = "Beatae consequatur dolayı çobanın lambadaki koşuyorlar masanın aspernatur ama ve.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(5863),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Refined Frozen Chips",
                            Status = 1,
                            UnitPrice = 249.35m,
                            UnitsInStock = 34
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(6468),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Practical Rubber Bike",
                            Status = 1,
                            UnitPrice = 632.03m,
                            UnitsInStock = 16
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(6574),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Handcrafted Steel Hat",
                            Status = 1,
                            UnitPrice = 446.09m,
                            UnitsInStock = 2
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(6664),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Ergonomic Metal Pizza",
                            Status = 1,
                            UnitPrice = 7.40m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(6852),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Practical Fresh Hat",
                            Status = 1,
                            UnitPrice = 921.52m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8496),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Tasty Plastic Shirt",
                            Status = 1,
                            UnitPrice = 198.27m,
                            UnitsInStock = 48
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8590),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Gorgeous Wooden Chicken",
                            Status = 1,
                            UnitPrice = 762.26m,
                            UnitsInStock = 28
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8647),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Handmade Plastic Fish",
                            Status = 1,
                            UnitPrice = 460.66m,
                            UnitsInStock = 16
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8751),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Generic Steel Bike",
                            Status = 1,
                            UnitPrice = 903.52m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8807),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Licensed Rubber Keyboard",
                            Status = 1,
                            UnitPrice = 43.00m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(8990),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Ergonomic Frozen Keyboard",
                            Status = 1,
                            UnitPrice = 814.30m,
                            UnitsInStock = 20
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9052),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Refined Granite Bacon",
                            Status = 1,
                            UnitPrice = 952.94m,
                            UnitsInStock = 22
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9105),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Handcrafted Concrete Pizza",
                            Status = 1,
                            UnitPrice = 16.74m,
                            UnitsInStock = 2
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9157),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Unbranded Soft Bacon",
                            Status = 1,
                            UnitPrice = 922.39m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9207),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Handmade Plastic Cheese",
                            Status = 1,
                            UnitPrice = 475.05m,
                            UnitsInStock = 44
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9474),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Fantastic Granite Salad",
                            Status = 1,
                            UnitPrice = 466.05m,
                            UnitsInStock = 15
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9541),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Generic Granite Shoes",
                            Status = 1,
                            UnitPrice = 611.60m,
                            UnitsInStock = 32
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9629),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Small Steel Car",
                            Status = 1,
                            UnitPrice = 254.29m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9686),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Intelligent Steel Bacon",
                            Status = 1,
                            UnitPrice = 8.42m,
                            UnitsInStock = 30
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9738),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Generic Plastic Chips",
                            Status = 1,
                            UnitPrice = 298.17m,
                            UnitsInStock = 42
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9788),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Tasty Rubber Bacon",
                            Status = 1,
                            UnitPrice = 777.11m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9836),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Handmade Steel Ball",
                            Status = 1,
                            UnitPrice = 1.21m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9885),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Sleek Soft Mouse",
                            Status = 1,
                            UnitPrice = 662.36m,
                            UnitsInStock = 30
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 544, DateTimeKind.Utc).AddTicks(9935),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Ergonomic Concrete Car",
                            Status = 1,
                            UnitPrice = 654.66m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(18),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Awesome Fresh Shoes",
                            Status = 1,
                            UnitPrice = 425.05m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(71),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Small Frozen Keyboard",
                            Status = 1,
                            UnitPrice = 717.97m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(122),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Fantastic Cotton Chair",
                            Status = 1,
                            UnitPrice = 649.20m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(173),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Sleek Metal Salad",
                            Status = 1,
                            UnitPrice = 737.22m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(221),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Rustic Fresh Bike",
                            Status = 1,
                            UnitPrice = 691.35m,
                            UnitsInStock = 26
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 26, 22, 13, 2, 545, DateTimeKind.Utc).AddTicks(274),
                            ImagePath = "/images/ProductImages/Test.png",
                            ProductName = "Unbranded Concrete Shoes",
                            Status = 1,
                            UnitPrice = 603.69m,
                            UnitsInStock = 47
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "27c0497d-9067-41e3-a353-8da147a5e3d3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "42556b2e-8753-41b2-9d05-7291f5ea7a8e",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "70c91b4f-84d0-4513-8012-66d70fee453d",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
