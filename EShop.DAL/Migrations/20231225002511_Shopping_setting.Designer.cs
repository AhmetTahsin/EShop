// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231225002511_Shopping_setting")]
    partial class Shopping_setting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba1838d2-7674-467c-a7da-f6623e8c8f97",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 551, DateTimeKind.Utc).AddTicks(103),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELl/bskvX3WrPZKOl9fnY3jzi04kn4fz+B85tm/HEt+/Jyz2Ffw8CPcJnOnMgHzeWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fc21e5d-dd3f-439d-9293-c52427f7d25b",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09a55d8f-92cc-4c26-abb6-dad23e00dba9",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 617, DateTimeKind.Utc).AddTicks(4729),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1GPJt2ZHe5ATJBheYPsH9GxSdBHP77w5Sdy+iVAkrpwoku9XEtusn0lsPoiWwJgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d265dda-3fe7-43f0-893e-17722db17594",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b1aec08-7f41-4ae5-a1b0-16be56d4015f",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 684, DateTimeKind.Utc).AddTicks(2342),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAECQPpHHlao6If1CXJfe/Hg8ha4KczlpPSnq+aaqQualKYGSJAOWZlcQCSkPKzIa4LA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e49c427-7f94-4dd1-a584-e7175820ea0e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(8822),
                            Description = "Koyun commodi sunt mıknatıslı sed sarmal rem ratione dağılımı labore.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9194),
                            Description = "Sinema praesentium aut qui bahar labore quae camisi enim ipsa.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Health",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9282),
                            Description = "Mutlu ullam sunt filmini sokaklarda totam ratione nostrum deleniti sit.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9361),
                            Description = "Ekşili gül sarmal cesurca alias ona lakin tempora beğendim nisi.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9467),
                            Description = "Camisi orta kulu commodi yaptı voluptatum salladı beatae aut vel.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9540),
                            Description = "Esse doğru qui bilgiyasayarı çorba dağılımı camisi vitae quam cesurca.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9610),
                            Description = "Vitae explicabo kulu mutlu quis bahar ea kalemi rem ipsam.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9678),
                            Description = "Mi ut corporis lakin cesurca ut ipsum beğendim eius nemo.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9767),
                            Description = "Çünkü bilgiyasayarı öyle telefonu bilgiyasayarı voluptatem gazete et quis et.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 550, DateTimeKind.Utc).AddTicks(9842),
                            Description = "Çarpan değerli ut enim qui minima dignissimos quam quis ad.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(6902),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Fantastic Steel Bacon",
                            Status = 1,
                            UnitPrice = 56.95m,
                            UnitsInStock = 49
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(7646),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Generic Cotton Sausages",
                            Status = 1,
                            UnitPrice = 42.45m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(7751),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Unbranded Metal Gloves",
                            Status = 1,
                            UnitPrice = 438.74m,
                            UnitsInStock = 44
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(7833),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Generic Fresh Pizza",
                            Status = 1,
                            UnitPrice = 43.49m,
                            UnitsInStock = 27
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(7921),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Rustic Cotton Pizza",
                            Status = 1,
                            UnitPrice = 557.03m,
                            UnitsInStock = 0
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8109),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Practical Granite Soap",
                            Status = 1,
                            UnitPrice = 529.69m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8181),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Rustic Metal Towels",
                            Status = 1,
                            UnitPrice = 878.74m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8245),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Handmade Frozen Shoes",
                            Status = 1,
                            UnitPrice = 92.48m,
                            UnitsInStock = 33
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8313),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Handmade Granite Gloves",
                            Status = 1,
                            UnitPrice = 116.53m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8366),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Licensed Steel Shirt",
                            Status = 1,
                            UnitPrice = 691.32m,
                            UnitsInStock = 12
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8423),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Generic Wooden Towels",
                            Status = 1,
                            UnitPrice = 608.75m,
                            UnitsInStock = 45
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8476),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Fantastic Granite Chair",
                            Status = 1,
                            UnitPrice = 990.75m,
                            UnitsInStock = 21
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8588),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Unbranded Wooden Chicken",
                            Status = 1,
                            UnitPrice = 252.32m,
                            UnitsInStock = 29
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8645),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Incredible Steel Gloves",
                            Status = 1,
                            UnitPrice = 853.47m,
                            UnitsInStock = 42
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8697),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Handmade Concrete Keyboard",
                            Status = 1,
                            UnitPrice = 516.29m,
                            UnitsInStock = 44
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8762),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Incredible Soft Salad",
                            Status = 1,
                            UnitPrice = 288.66m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8821),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Unbranded Metal Salad",
                            Status = 1,
                            UnitPrice = 441.72m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8873),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Incredible Granite Mouse",
                            Status = 1,
                            UnitPrice = 92.07m,
                            UnitsInStock = 3
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(8932),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Small Granite Bike",
                            Status = 1,
                            UnitPrice = 416.11m,
                            UnitsInStock = 22
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9016),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Generic Fresh Fish",
                            Status = 1,
                            UnitPrice = 173.47m,
                            UnitsInStock = 29
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9074),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Sleek Steel Computer",
                            Status = 1,
                            UnitPrice = 58.04m,
                            UnitsInStock = 24
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9127),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Practical Granite Tuna",
                            Status = 1,
                            UnitPrice = 6.81m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9179),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Intelligent Wooden Table",
                            Status = 1,
                            UnitPrice = 125.65m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9231),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Generic Frozen Cheese",
                            Status = 1,
                            UnitPrice = 264.50m,
                            UnitsInStock = 49
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9283),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Unbranded Plastic Keyboard",
                            Status = 1,
                            UnitPrice = 108.60m,
                            UnitsInStock = 43
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9334),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Fantastic Fresh Computer",
                            Status = 1,
                            UnitPrice = 750.81m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9412),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Licensed Cotton Gloves",
                            Status = 1,
                            UnitPrice = 802.88m,
                            UnitsInStock = 39
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9463),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Awesome Fresh Towels",
                            Status = 1,
                            UnitPrice = 664.24m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9518),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Fantastic Wooden Keyboard",
                            Status = 1,
                            UnitPrice = 699.03m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 25, 10, 759, DateTimeKind.Utc).AddTicks(9568),
                            ImagePath = "/images/ProductImages/Test.jpg",
                            ProductName = "Fantastic Rubber Tuna",
                            Status = 1,
                            UnitPrice = 710.13m,
                            UnitsInStock = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "204e5634-438e-4681-aa49-5db2ffe04804",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "4f0757fd-a32c-4404-b51e-74ba8a80e2b1",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "f785e3bb-573e-4d4a-b44f-070c0f802daa",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
