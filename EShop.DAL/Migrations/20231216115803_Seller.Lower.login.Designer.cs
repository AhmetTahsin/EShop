// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231216115803_Seller.Lower.login")]
    partial class SellerLowerlogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a6f8982-8a85-4758-9090-9678b6827424",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1530),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF0NR66516PPf4YKKjqwD7ILWPk2APaidH5dYB07UlmT6jcG06OPrtvKTTIeWnXy+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "931cc686-a246-4f95-bb09-cc6857ceb365",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c4c1619-0da2-43bc-a5fb-87167bb57cf9",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 178, DateTimeKind.Utc).AddTicks(6790),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPp9KWfybkmJENdleD0yXTiA93gt6QwmMuGd04Us4oXkrufwe8SXDHcEiADQWsDMWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3462b240-4264-4cc0-a959-ee3b6bcf30b5",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "034336b4-ac66-49ec-9b0f-d89c076ea004",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 251, DateTimeKind.Utc).AddTicks(6834),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAECp4Tri1MwWbVER2B4Oh8UIz4zoc772wC+8ATBJZ4iX5g42Hp4jsRYN4BJxI2mjcYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb39d50b-d971-45c2-a92a-c3a4fba8fa1f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(572),
                            Description = "Mi yapacakmış dağılımı perferendis nihil sit ipsa consectetur açılmadan ipsa.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(827),
                            Description = "Işık nisi architecto consequatur gülüyorum hesap koyun quaerat değirmeni çobanın.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Health",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(930),
                            Description = "Ama quis bahar dolayı tv fugit ipsam kalemi kutusu gül.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Health",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1018),
                            Description = "Consectetur masanın aperiam nihil dağılımı domates molestiae totam makinesi totam.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Beauty",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1072),
                            Description = "Voluptate voluptatem çorba alias camisi göze bundan değerli tempora veritatis.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Industrial",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1129),
                            Description = "Sit gül architecto değerli şafak quis ut lakin quia corporis.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1180),
                            Description = "Sarmal türemiş voluptatem doloremque camisi çarpan sandalye gidecekmiş koyun sunt.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1233),
                            Description = "Düşünüyor ama illo blanditiis çorba explicabo quae ut aut dicta.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1306),
                            Description = "Çorba gitti koştum mıknatıslı labore amet dolorem uzattı ullam kalemi.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 120, DateTimeKind.Utc).AddTicks(1359),
                            Description = "İpsum dignissimos balıkhaneye qui sequi orta nemo doloremque modi doloremque.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductImageID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductImageID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(4738),
                            ProductImageID = 1,
                            ProductName = "Incredible Cotton Chips",
                            Status = 1,
                            UnitPrice = 104.52m,
                            UnitsInStock = 17
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(6229),
                            ProductImageID = 1,
                            ProductName = "Intelligent Frozen Mouse",
                            Status = 1,
                            UnitPrice = 98.45m,
                            UnitsInStock = 44
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(6337),
                            ProductImageID = 1,
                            ProductName = "Fantastic Rubber Chair",
                            Status = 1,
                            UnitPrice = 770.88m,
                            UnitsInStock = 14
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(6426),
                            ProductImageID = 1,
                            ProductName = "Gorgeous Steel Computer",
                            Status = 1,
                            UnitPrice = 290.56m,
                            UnitsInStock = 35
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(6556),
                            ProductImageID = 1,
                            ProductName = "Ergonomic Fresh Keyboard",
                            Status = 1,
                            UnitPrice = 302.72m,
                            UnitsInStock = 29
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(6682),
                            ProductImageID = 1,
                            ProductName = "Incredible Granite Fish",
                            Status = 1,
                            UnitPrice = 427.87m,
                            UnitsInStock = 43
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(7062),
                            ProductImageID = 1,
                            ProductName = "Licensed Granite Ball",
                            Status = 1,
                            UnitPrice = 701.26m,
                            UnitsInStock = 23
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(7114),
                            ProductImageID = 1,
                            ProductName = "Refined Fresh Bacon",
                            Status = 1,
                            UnitPrice = 318.90m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(7212),
                            ProductImageID = 1,
                            ProductName = "Awesome Rubber Tuna",
                            Status = 1,
                            UnitPrice = 265.83m,
                            UnitsInStock = 49
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(7273),
                            ProductImageID = 1,
                            ProductName = "Fantastic Soft Computer",
                            Status = 1,
                            UnitPrice = 822.92m,
                            UnitsInStock = 17
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(7399),
                            ProductImageID = 1,
                            ProductName = "Rustic Metal Table",
                            Status = 1,
                            UnitPrice = 754.37m,
                            UnitsInStock = 23
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8002),
                            ProductImageID = 1,
                            ProductName = "Small Rubber Pants",
                            Status = 1,
                            UnitPrice = 707.32m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8051),
                            ProductImageID = 1,
                            ProductName = "Refined Granite Tuna",
                            Status = 1,
                            UnitPrice = 175.22m,
                            UnitsInStock = 5
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8098),
                            ProductImageID = 1,
                            ProductName = "Awesome Frozen Shirt",
                            Status = 1,
                            UnitPrice = 475.61m,
                            UnitsInStock = 7
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8149),
                            ProductImageID = 1,
                            ProductName = "Awesome Wooden Pants",
                            Status = 1,
                            UnitPrice = 47.00m,
                            UnitsInStock = 15
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8377),
                            ProductImageID = 1,
                            ProductName = "Practical Granite Soap",
                            Status = 1,
                            UnitPrice = 764.78m,
                            UnitsInStock = 7
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8434),
                            ProductImageID = 1,
                            ProductName = "Rustic Cotton Chicken",
                            Status = 1,
                            UnitPrice = 844.70m,
                            UnitsInStock = 28
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8486),
                            ProductImageID = 1,
                            ProductName = "Intelligent Wooden Bike",
                            Status = 1,
                            UnitPrice = 440.09m,
                            UnitsInStock = 13
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8564),
                            ProductImageID = 1,
                            ProductName = "Incredible Steel Ball",
                            Status = 1,
                            UnitPrice = 223.32m,
                            UnitsInStock = 15
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8906),
                            ProductImageID = 1,
                            ProductName = "Incredible Steel Ball",
                            Status = 1,
                            UnitPrice = 236.99m,
                            UnitsInStock = 41
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(8955),
                            ProductImageID = 1,
                            ProductName = "Handmade Wooden Gloves",
                            Status = 1,
                            UnitPrice = 926.54m,
                            UnitsInStock = 21
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9172),
                            ProductImageID = 1,
                            ProductName = "Practical Concrete Car",
                            Status = 1,
                            UnitPrice = 325.47m,
                            UnitsInStock = 4
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9222),
                            ProductImageID = 1,
                            ProductName = "Sleek Soft Cheese",
                            Status = 1,
                            UnitPrice = 10.99m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9271),
                            ProductImageID = 1,
                            ProductName = "Handcrafted Granite Fish",
                            Status = 1,
                            UnitPrice = 365.64m,
                            UnitsInStock = 43
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9537),
                            ProductImageID = 1,
                            ProductName = "Handmade Concrete Chair",
                            Status = 1,
                            UnitPrice = 266.56m,
                            UnitsInStock = 37
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9644),
                            ProductImageID = 1,
                            ProductName = "Sleek Soft Ball",
                            Status = 1,
                            UnitPrice = 638.30m,
                            UnitsInStock = 24
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9693),
                            ProductImageID = 1,
                            ProductName = "Ergonomic Cotton Hat",
                            Status = 1,
                            UnitPrice = 631.35m,
                            UnitsInStock = 48
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9750),
                            ProductImageID = 1,
                            ProductName = "Refined Cotton Gloves",
                            Status = 1,
                            UnitPrice = 950.81m,
                            UnitsInStock = 8
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9802),
                            ProductImageID = 1,
                            ProductName = "Tasty Fresh Table",
                            Status = 1,
                            UnitPrice = 406.23m,
                            UnitsInStock = 31
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(9850),
                            ProductImageID = 1,
                            ProductName = "Rustic Plastic Pants",
                            Status = 1,
                            UnitPrice = 390.52m,
                            UnitsInStock = 5
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2023, 12, 16, 11, 58, 2, 319, DateTimeKind.Utc).AddTicks(4612),
                            ImagePath = "/Images/ProductImages/Test.png",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "456c04e3-364c-4e30-92a2-84b1d4e356ad",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0ebe1783-cfde-41ef-90c7-b68d50bda64e",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "226ebf1e-b891-4347-9557-5dba6884e05d",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("EShop.ENTITIES.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageID");

                    b.Navigation("Category");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.ProductImage", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
