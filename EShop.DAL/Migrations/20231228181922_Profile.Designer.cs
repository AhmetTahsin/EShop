// <auto-generated />
using System;
using EShop.DAL.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231228181922_Profile")]
    partial class Profile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42e5b733-e168-4194-9db0-1e29f8004332",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(7263),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL5Q58w3BFBG1oCN+Rx1W/tizzow1Z3rUT7A569W9rEyH55qFFGvEdTKaApchECVlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a964622-b5fa-4223-b708-f4e6a7ea8ef2",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f97928ec-f20a-48dc-9986-3d80294cb4ab",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 966, DateTimeKind.Utc).AddTicks(9441),
                            Email = "member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+4B5bUEkhmZPSWUz/X+0ddS8llH2XkLoNZCfFzCDJz7pAob9l6TKWo+DyGQE4hkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97d860b3-1c03-4aa3-8357-ca8cab7ee95e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "member123"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b18f19-0623-4ad5-a5e7-5f9501317c38",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 39, DateTimeKind.Utc).AddTicks(2559),
                            Email = "seller@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAECdmQfzHY0UfmKa8ugGxCcTR1gp8HrPysLZm90V1QbsUXtNfngADB0HuA2+aL7JC8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edfabdc4-ef10-44d0-a647-218bd64028a8",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "seller123"
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("AppUserProfiles");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6120),
                            Description = "Dağılımı incidunt esse sunt öyle kulu mi quis quae commodi.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6464),
                            Description = "Otobüs voluptatem lakin dolore yazın iusto mutlu explicabo sit çarpan.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6535),
                            Description = "Gördüm et kapının odit magni ışık anlamsız ekşili ad alias.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Home",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6628),
                            Description = "Koyun yaptı quis ipsa voluptatem commodi un doğru mıknatıslı neque.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Tools",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6690),
                            Description = "Quae inventore ab nihil türemiş dışarı minima ducimus bundan gördüm.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6788),
                            Description = "Yaptı dışarı beğendim hesap çobanın sed ea sed perferendis minima.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6848),
                            Description = "Sarmal ea quis aut değerli et çıktılar ut karşıdakine adanaya.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Garden",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6903),
                            Description = "Quia filmini in patlıcan consequuntur voluptate gitti çünkü reprehenderit ex.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Garden",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(6962),
                            Description = "Voluptatem patlıcan quia laudantium qui göze qui magni eos architecto.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 20, 895, DateTimeKind.Utc).AddTicks(7017),
                            Description = "Telefonu aut enim beğendim ama ea öyle ve doğru telefonu.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("PriceOfOrder")
                        .HasColumnType("money");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("KDV")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("OTV")
                        .HasColumnType("decimal");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(3717),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handcrafted Fresh Shoes",
                            Status = 1,
                            UnitPrice = 253.41m,
                            UnitsInStock = 22
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(4393),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Sleek Granite Sausages",
                            Status = 1,
                            UnitPrice = 671.59m,
                            UnitsInStock = 29
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(5448),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Licensed Steel Shoes",
                            Status = 1,
                            UnitPrice = 183.80m,
                            UnitsInStock = 28
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(5602),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Licensed Cotton Salad",
                            Status = 1,
                            UnitPrice = 63.90m,
                            UnitsInStock = 46
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(5685),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Licensed Plastic Chicken",
                            Status = 1,
                            UnitPrice = 957.66m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(5809),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Cotton Bike",
                            Status = 1,
                            UnitPrice = 813.32m,
                            UnitsInStock = 40
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(5884),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Licensed Frozen Shoes",
                            Status = 1,
                            UnitPrice = 345.91m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6035),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Generic Frozen Fish",
                            Status = 1,
                            UnitPrice = 971.10m,
                            UnitsInStock = 39
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6142),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Frozen Shoes",
                            Status = 1,
                            UnitPrice = 747.84m,
                            UnitsInStock = 45
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6203),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Rubber Keyboard",
                            Status = 1,
                            UnitPrice = 922.76m,
                            UnitsInStock = 39
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6329),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Gorgeous Granite Mouse",
                            Status = 1,
                            UnitPrice = 947.19m,
                            UnitsInStock = 16
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6388),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Concrete Chicken",
                            Status = 1,
                            UnitPrice = 447.57m,
                            UnitsInStock = 12
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6444),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Cotton Soap",
                            Status = 1,
                            UnitPrice = 856.43m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6506),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Small Cotton Mouse",
                            Status = 1,
                            UnitPrice = 222.71m,
                            UnitsInStock = 43
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6604),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Rubber Pants",
                            Status = 1,
                            UnitPrice = 772.36m,
                            UnitsInStock = 25
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6872),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handmade Metal Tuna",
                            Status = 1,
                            UnitPrice = 421.06m,
                            UnitsInStock = 4
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6938),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Unbranded Rubber Hat",
                            Status = 1,
                            UnitPrice = 459.31m,
                            UnitsInStock = 36
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(6998),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handcrafted Concrete Ball",
                            Status = 1,
                            UnitPrice = 735.26m,
                            UnitsInStock = 44
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7056),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Ergonomic Rubber Sausages",
                            Status = 1,
                            UnitPrice = 156.62m,
                            UnitsInStock = 38
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7112),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Handcrafted Fresh Pizza",
                            Status = 1,
                            UnitPrice = 91.35m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7208),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Intelligent Metal Computer",
                            Status = 1,
                            UnitPrice = 616.67m,
                            UnitsInStock = 39
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7268),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Rustic Metal Bacon",
                            Status = 1,
                            UnitPrice = 51.22m,
                            UnitsInStock = 33
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7327),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Rustic Steel Computer",
                            Status = 1,
                            UnitPrice = 664.38m,
                            UnitsInStock = 7
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7382),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Rustic Plastic Chips",
                            Status = 1,
                            UnitPrice = 292.77m,
                            UnitsInStock = 23
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7438),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Small Granite Fish",
                            Status = 1,
                            UnitPrice = 86.80m,
                            UnitsInStock = 36
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7492),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Gorgeous Wooden Fish",
                            Status = 1,
                            UnitPrice = 250.62m,
                            UnitsInStock = 29
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7551),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Awesome Wooden Sausages",
                            Status = 1,
                            UnitPrice = 60.75m,
                            UnitsInStock = 6
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7637),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Small Rubber Soap",
                            Status = 1,
                            UnitPrice = 219.73m,
                            UnitsInStock = 19
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7696),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Intelligent Granite Computer",
                            Status = 1,
                            UnitPrice = 104.38m,
                            UnitsInStock = 5
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2023, 12, 28, 18, 19, 21, 113, DateTimeKind.Utc).AddTicks(7760),
                            ImagePath = "/images/ProductImages/Test.png",
                            KDV = 10m,
                            ProductName = "Rustic Rubber Shoes",
                            Status = 1,
                            UnitPrice = 574.82m,
                            UnitsInStock = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "5b8305ae-73cc-4792-9985-8b9ffa84c273",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "69f2fd67-ecd7-4aa5-9ee0-d0b74bcd0344",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "7784d274-6a5a-4f99-a6ea-9055cbdeb72e",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("EShop.ENTITIES.Models.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EShop.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EShop.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
